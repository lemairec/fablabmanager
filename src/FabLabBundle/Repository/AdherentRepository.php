<?php

namespace FabLabBundle\Repository;
use FabLabBundle\Entity\Adherent;

use Symfony\Component\Console\Logger\ConsoleLogger;


/**
 * AdherentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdherentRepository extends \Doctrine\ORM\EntityRepository
{
    function add($no, $name, $surname, $type){
        $adherent = new Adherent();
        $adherent->no = $no;
        $adherent->name = $name;
        $adherent->surname = $surname;
        $adherent->type = $type;
        $adherent->actif = true;
        $adherent->fondateur = false;
        $this->save($adherent);
        return $adherent;
    }

    function save($adherent){
        $em = $this->getEntityManager();
        $adherent->cf = 0;
        if($adherent->type == "particulier"){
            $adherent->price_categorie = 'A';
        } else {
            $adherent->price_categorie = 'B';
        }
        $em->persist($adherent);
        $em->flush();
        $this->update_cf($adherent->no);
    }

    function update_cf($adherent_no){
        $em = $this->getEntityManager();
        $adhesionRep = $em->getRepository('FabLabBundle:Adhesion');
        $adhesion_cf = $adhesionRep->createQueryBuilder('p')
             ->select("sum(p.cf)")
            ->where('p.adherent = :adherent')
            ->setParameter('adherent', $adherent_no)
            ->getQuery()
            ->getSingleScalarResult();
        $achatRep = $em->getRepository('FabLabBundle:Achat');
        $achat_cf = $achatRep->createQueryBuilder('p')
             ->select("sum(p.price)")
            ->where('p.adherent = :adherent')
            ->setParameter('adherent', $adherent_no)
            ->getQuery()
            ->getSingleScalarResult();
        $rechargementRep = $em->getRepository('FabLabBundle:Rechargement');
        $rechargement_cf = $rechargementRep->createQueryBuilder('p')
            ->select("sum(p.cf)")
            ->where('p.adherent = :adherent')
            ->setParameter('adherent', $adherent_no)
            ->getQuery()
            ->getSingleScalarResult();

        print($adhesion_cf." ".$achat_cf." ".$rechargement_cf);
        $adherent = $this->findOneByNo($adherent_no);
        $adherent->cf = $adhesion_cf + $rechargement_cf - $achat_cf;
        $em->persist($adherent);
        $em->flush();
    }


    public function getNb() {
        return $this->createQueryBuilder('l')
            ->select('COUNT(l)')
            ->getQuery()
            ->getSingleScalarResult();
    }
}

